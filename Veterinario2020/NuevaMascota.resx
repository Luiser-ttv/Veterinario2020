<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABZTkMXVUpELVVKRC1RRkYWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAWU5DF1RLRG1VS0W6Vk1F+lRLRP9US0T/VEtE/1RLRP9VTUb5VUxFuVVMRGxRRkYWAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAVVU5CVRLRXpWTEb0VEtE/21lX/yhnJj/uraz/83KyP/Nysj/uraz/6GcmP9sZV/8VEtE/1VN
        RfNVSkR4YEBACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAFNMRSVWTkfZVUxF/46Ig/7j4eD/////////////////////////////////////////
        ///i4d//jYeC/lVMRf9XTUbWV0lCIwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABVTUU/VU1F8GNaU/vX1dT/////////////////////////////////////////
        ////////////////////////19XT/2JZU/tVTUXvVEtDPQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAVU5HJFZORvBvZ2L87Ovq////////////////////////////////////
        ////////////////////////////////////////6+rp/25nYfxWTUbvU0tEIgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAFVVOQlWTEbWYVhS++vq6f//////////////////////////////
        ////////////////////////////////////////////////////////6ujo/2FYUftVTUbUSUlJBwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVUpEeFVMRf/V09H/////////////////////////
        ////////////////////////////////////////////////////////////////////////09DP/1RL
        RP9VSkR1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFVJSRVVTUXzjIaB/v//////////////////
        ////////////////////////////////////////////////////////////////////////////////
        ////////iIJ9/VZMRvFRUUMTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVEtDalRLRP/h4N//////////
        ////////////////////////////////////////4Nz//+Dc////////////////////////////////
        ///////////////////f3t3/VEtE/1RKQ2cAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABVTEW2amJc/P//
        //////////////////////////////////////////////////+dkP//npD/////////////////////
        //////////////////////////////////9pYlz8VUxEswAAAAAAAAAAAAAAAAAAAAAAAAAAVVVVA1ZN
        Rfqinpr//////////////////////////////////////////////////////5yP//+cj///////////
        /////////////////////////////////////////////6CbmP9VTUb5gICAAgAAAAAAAAAAAAAAAAAA
        AABSR0cZVEtE/7q2s///////////////////////////////////////////////////////nI///5yP
        ////////////////////////////////////////////////////////ubaz/1RLRP9ZTkMXAAAAAAAA
        AAAAAAAAAAAAAFNKRTRUS0T/zcrI/////////////////////////////////+Hd//+fkv//npH//56R
        //+Ec///hHP//56R//+ekf//n5L//+Le///////////////////////////////////Lycf/VEtE/1VL
        RjMAAAAAAAAAAAAAAAAAAAAAU0pFNFRLRP/Mycf/////////////////////////////////4Nz//5iK
        //+Vh///lYf//4Fx//+Bcf//lYf//5WH//+Zi///4Nz//////////////////////////////////8vJ
        x/9US0T/VUtGMwAAAAAAAAAAAAAAAAAAAABVTEIbVEtE/7u4tf//////////////////////////////
        ////////////////////////nI///5yP////////////////////////////////////////////////
        ////////ubaz/1RLRP9SR0cZAAAAAAAAAAAAAAAAAAAAAEBAQARUTEX7op6a////////////////////
        //////////////////////////////////+cj///nI//////////////////////////////////////
        //////////////////+gm5j/VUtE+lVVVQMAAAAAAAAAAAAAAAAAAAAAAAAAAFZNRsBwaGL8////////
        /////////////////////////////////////////////52Q//+ekP//////////////////////////
        /////////////////////////////21mYPxVTEW8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVUxEbFRL
        RP/h4N//////////////////////////////////////////////////4Nz//+Dc////////////////
        ///////////////////////////////////f3t3/VEtE/1VLRGkAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABVSUkVVk1H9YyGgf//////////////////////////////////////////////////////////////
        /////////////////////////////////////////////4mDfv9WTkbzUVFDEwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABVS0V+VUxF/9XT0f//////////////////////////////////////////////
        ///////////////////////////////////////////////////T0M//VEtE/1RLRXoAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAFVVQAxWTUbeYVlT/Ovq6f//////////////////////////////
        ////////////////////////////////////////////////////////6ujo/2FZUvxWTkfcTU1NCgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFNNRihWTUfyb2di/Ozr6v//////////////
        /////////////////////////////////////////////////////////////+vq6f9uZ2H8Vk1G8VdK
        QyYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFVNRT9WTUbxY1tU/NfV
        1P/////////////////////////////////////////////////////////////////X1dP/YlpU/FdO
        R/FUS0M9AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFNM
        RSVWTkfZVUxF/46Ig/7j4eD////////////////////////////////////////////i4d//jYeC/lVM
        Rf9XTUbWV0lCIwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAFVVOQlUS0V6VkxG9FRLRP9tZV/8oZyY/7q2s//Nysj/zcrI/7q2s/+hnJj/bGVf/FRL
        RP9VTUXzVUpEeGBAQAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABZTkMXVEtEbVVLRbpWTUX6VEtE/1RLRP9US0T/VEtE/1VN
        RvlVTEW5VUxEbFFGRhYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABZTkMXVUpELVVK
        RC1RRkYWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//////////////////AP///AA///AAD//gAAf/wAAD/4AAAf+AAAH/AA
        AA/wAAAP4AAAB+AAAAfgAAAH4AAAB+AAAAfgAAAH4AAAB+AAAAfwAAAP8AAAD/gAAB/4AAAf/AAAP/4A
        AH//AAD//8AD///wD/////////////////8=
</value>
  </data>
</root>